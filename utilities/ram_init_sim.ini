/******************************************************************************/
/* SIM.INI: Simulator Initialization File                                     */
/******************************************************************************/
/* This file is part of the uVision/ARM development tools.                    */
/* Copyright (c) 2005-2007 Keil Software. All rights reserved.                */
/* This software may only be used under the terms of a valid, current,        */
/* end user licence from KEIL for a compatible version of KEIL software       */
/* development tools. Nothing else gives you the right to use this software.  */
/******************************************************************************/


		
//_WDWORD(0xFFFFFD44, 0x00008000);     // WDT_WDMR: Disable Watchdog

// Switching from Slow Clock to Main Oscillator for faster Download
//_WDWORD(0xFFFFFC20, 0x00000601);     // PMC_MOR: Enable Main Oscillator
//_sleep_(10);                         // Wait for stable Main Oscillator
//_WDWORD(0xFFFFFC30, 0x00000001);     // PMC_MCKR: Switch to Main Oscillator
	
/* 
	Error 65: Access violation at ... : No 'write' permission:
	When the µVision Debugger loads an executable program, it creates a memory map 
	using the program and data segments from the program. Code segments are marked as 
	executable while data segments are marked as read/write. 
	All other memory is unmapped and is, therefore, not marked for any type of access.
	The µVision Debugger checks that all memory accesses are made to objects that 
	are defined in your C program. For any access that is outside of a defined C object, 
	the µVision debugger generates an error 65: access violation message.
	By default, the debugger allows only memory accesses to valid data objects. 
	This is useful for finding uninitialized or incorrectly initialized pointers, for example. 
	Usually, there is a programming error when you try to access unexpected locations.
	
	Enable memory regions for absolute memory accesses within the EMAC area 
*/	
//MAP	0x208000, 0x20FFFF READ WRITE


$=0x40000000  // set PC to RAM
/* g, main  // run to main	*/

/*
 *  Simulate LCD Display (2 line 40 character Text LCD with 4-bit Interface)
 *    Pins:
 *      - DB4..DB7 = P1.24..P1.27
 *      - RS       = P1.28
 *      - RW       = P1.29
 *      - E        = P1.31
 */

define unsigned long oldPORT1;
define unsigned char Cursor;
define unsigned char bitpos;
define unsigned char Cmd;

define unsigned long _E;
define unsigned long _RW;
define unsigned long _RS;
define unsigned long _CTRL;
define unsigned long _DATA;

MAP 0x10000000, 0x1000004F READ WRITE   // LCD Memory

oldPORT1 = PORT1;
Cursor   = 0;
bitpos   = 0;

_E    = 0x80000000;
_RW   = 0x20000000;
_RS   = 0x10000000;
_CTRL = 0xB0000000;
_DATA = 0x0F000000;

// Clear Display Function
Func void LCD_Clear (void) {
  unsigned char i;

  for (i = 0; i < 80; i++) {
    _WBYTE(0x10000000 + i, 0x20);
  }
  Cursor = 0;
}

// LCD Display Signal Function
Signal void LCD_Display (void) {
  unsigned char val;

  while (1) {
    wwatch(PORT1);  // Wait for write to PORT1
    if ((PORT1 & _RW) == 0) {
      // Write to Display
      if (((oldPORT1 & _E) != 0) && ((PORT1 & _E) == 0)) {
        // E: 1->0
        if ((PORT1 & _RS) == 0) {
          // Write Command
          val  = ((PORT1 & _DATA) >> 24);
          if (val == 3) {
            bitpos = 4;
          }
          Cmd &= 0xF0 >> bitpos;
          Cmd |= val << bitpos;
          if (bitpos == 0) {
            if (Cmd == 0x01) {
              // Clear Display
              LCD_Clear();
            } else if (Cmd & 0x80) {
              // Set Cursor Position
              Cursor = Cmd & 0x7F;
            }
          }
        } else {
          // Write Data
          val  = _RBYTE(0x10000000 + Cursor);
          val &= 0xF0 >> bitpos;
          val |= ((PORT1 & _DATA) >> 24) << bitpos;
          _WBYTE(0x10000000 + Cursor, val);
          if (bitpos == 0) Cursor++;
        }
        bitpos ^= 4;
      }
    } else {
      // Read from Display
      if (((oldPORT1 & _E) == 0) && ((PORT1 & _E) != 0)) {
        // E: 0->1
        if ((PORT1 & _RS) == 0) {
          // Read Status
          val = (0x7F >> bitpos) & 0x0F;
        } else {
          // Read Pointer
          val = ((Cursor & 0x7F) >> bitpos) & 0x0F;
        }
        PORT1 &= ~_DATA;
        PORT1 |=  val << 24;
        bitpos ^= 4;
      }
    }
    oldPORT1 = PORT1;
  }
}

LCD_Display()

/* Define Buttons */
define button "Send 'u'", "sendc('u')"
define button "Send 'd'", "sendc('d')"
define button "Send 'a'", "sendc('a')"
define button "Send 'ESC'", "sendc('\33')"
define button "Button short", "button_pressed(0.05)"
define button "Button long", "button_pressed(0.1)"


/* Define Signals */
SIGNAL void button_pressed(float time) {
	
	PORT2 &= ~(1<<10);	/* reset pin 2.10 */
	swatch(time);				/* wait time in seconds */
	PORT2 |= (1<<10);		/* set pin 2.10 */	
	
}

signal void sendc(char c) {
 
   S0IN = c;           /* Send character */
   swatch(0.1);				 /* Wait 100msec */
  
}
